-- =========================
-- FunFacts ProJobs
-- =========================



----------------------------------------------------
-- Job ads

-- Alle X Sekunden stellt XING einen neuen Job online
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) as "SECONDS_BETWEEN", 
	count(DISTINCT POSTING_ID) as JOBS_ADS,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) / count(DISTINCT POSTING_ID) AS "x"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT 
		v.POSTING_ID, 
		min(v.DAY_DATE) AS FIRST_ONLINE_DATE
	 FROM DL_JOBS.VISIBLE_POSTINGS_DAILY v
	 JOIN IL_OPENBI.DIM_POSTINGS p
		ON v.POSTING_ID = p.POSTING_ID
	 WHERE p.COUNTRY_KEY IN ('de','ch','at')
	 GROUP BY 1
	 ) a
	ON d.DAY_DESC = to_date(a.FIRST_ONLINE_DATE)
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;

-- Eine bei XING eingestellte Job ad generiert pro Tag x jobclicks
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	count(POSTING_ID) AS NUM_JOB_ADS,
	sum(JOB_CLICKS_PRO_TAG) AS JOB_CLICKS,
	sum(JOB_CLICKS_PRO_TAG)/count(POSTING_ID) AS JOB_CLICKS_DAY	
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT 
		v.POSTING_ID, 
		v.DAY_DATE AS ONLINE_DATE,
		sum(c.CLICK) AS JOB_CLICKS_PRO_TAG
	 FROM DL_JOBS.VISIBLE_POSTINGS_DAILY v
	 JOIN IL_OPENBI.DIM_POSTINGS p
		ON v.POSTING_ID = p.POSTING_ID
	 LEFT JOIN IL_OPENBI.FCT_POSTING_VIEWS c
		ON v.POSTING_ID = c.POSTING_ID
		AND v.DAY_DATE = to_date(c.CREATED_AT)
	 WHERE v.DAY_DATE BETWEEN '2019-01-01' AND '2020-07-31'
	 AND p.PAID = 1
	 AND p.COUNTRY_KEY IN ('de','ch','at')
	 GROUP BY 1,2
	 ) a
	ON d.DAY_DESC = to_date(a.ONLINE_DATE)
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;

-- Eine bei XING eingestellte Job ad bleibt durchschnittlich x Tage online
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	count(POSTING_ID) AS NUM_JOB_ADS,
	sum(NUM_ONLINE_DAYS) AS ONLINE_DAYS,
	sum(NUM_ONLINE_DAYS)/count(POSTING_ID) AS "X"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT 
		v.POSTING_ID, 
		min(v.DAY_DATE) AS FIRST_ONLINE_DATE,
		count(DISTINCT v.DAY_DATE) AS NUM_ONLINE_DAYS
	 FROM DL_JOBS.VISIBLE_POSTINGS_DAILY v
	 JOIN IL_OPENBI.DIM_POSTINGS p
		ON v.POSTING_ID = p.POSTING_ID
	 WHERE p.PAID = 1
	 AND p.COUNTRY_KEY IN ('de','ch','at')
	 GROUP BY 1
	 HAVING min(v.DAY_DATE) BETWEEN '2018-01-01' AND '2019-07-31'
	 ) a
	ON d.DAY_DESC = to_date(a.FIRST_ONLINE_DATE)
WHERE d.MONTH_ID BETWEEN 201801 AND 201907
GROUP BY 1 ORDER BY 1 ASC
;


----------------------------------------------------
-- Recruiter visits

-- Alle X Sekunden besucht ein Recruiter ein XING-Profil
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) as "SECONDS_BETWEEN", 
	count(*) as VISITS,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) / count(*) AS "x"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN IL_OPENBI.PROFILE_VISIT_REASONS a
	ON d.DAY_DESC = to_date(a."time")
--/*
INNER JOIN IL_OPENBI.DIM_MEMBERS_T m
	ON a.USER_ID = m.USER_ID
	AND a."time" >= ADD_DAYS(m.DG_START_DATE,-1)
	AND a."time" < ADD_DAYS(m.DG_END_DATE,-1)
	AND m.COUNTRY_BUSINESS IN ('de','at','ch')
--*/
WHERE a.PROFILE_VISIT_REASON_ID = 100126 -- see: DIMENSIONS.DIM_PROFILE_VISIT_REASON / DIMENSIONS.DIM_PROFILE_VISITS
AND d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;

-- Ein XING-User wird im Monat x Mal von einem Recruiter besucht
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	count(DISTINCT a.USER_ID) AS NUM_USER,
	sum(a.NUM_VISITS) as VISITS,
	sum(a.NUM_VISITS) / count(DISTINCT a.USER_ID) AS "x"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT
		m.USER_ID,
		to_date(a."time") AS VISIT_DATE,
		count(*) AS NUM_VISITS
	FROM IL_OPENBI.PROFILE_VISIT_REASONS a
	INNER JOIN IL_OPENBI.DIM_MEMBERS_T m
		ON a.USER_ID = m.USER_ID
		AND m.MEMBER_FLAG = 1
		AND a."time" >= ADD_DAYS(m.DG_START_DATE,-1)
		AND a."time" < ADD_DAYS(m.DG_END_DATE,-1)
		AND to_date(m.MEMBER_CREATION_DATE) < ADD_DAYS(to_date(a."time"),-30)
		AND m.COUNTRY_BUSINESS IN ('de','at','ch')
	WHERE a.PROFILE_VISIT_REASON_ID = 100126 -- see: DIMENSIONS.DIM_PROFILE_VISIT_REASON / DIMENSIONS.DIM_PROFILE_VISITS
	AND to_date(a."time") BETWEEN '2019-01-01' AND '2020-07-31'
	GROUP BY 1,2
	) a
	ON d.DAY_DESC = a.VISIT_DATE
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;

-- Ein XING Jobsucher wird im Monat x Mal von einem Recruiter besucht
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	count(DISTINCT a.USER_ID) AS NUM_USER,
	sum(a.NUM_VISITS) as VISITS,
	sum(a.NUM_VISITS) / count(DISTINCT a.USER_ID) AS "x"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT
		m.USER_ID,
		to_date(a."time") AS VISIT_DATE,
		count(*) AS NUM_VISITS
	FROM IL_OPENBI.PROFILE_VISIT_REASONS a
	INNER JOIN DL_PROFILE.JOB_SEEKERS_T s
		ON a.USER_ID = s.USER_ID
		AND a."time" >= ADD_DAYS(s.DG_START_DATE,-1)
		AND a."time" < ADD_DAYS(s.DG_END_DATE,-1)
		AND s.SEEKING_STATUS = 'seeking'
	INNER JOIN IL_OPENBI.DIM_MEMBERS_T m
		ON a.USER_ID = m.USER_ID
		AND m.MEMBER_FLAG = 1
		AND a."time" >= ADD_DAYS(m.DG_START_DATE,-1)
		AND a."time" < ADD_DAYS(m.DG_END_DATE,-1)
		AND to_date(m.MEMBER_CREATION_DATE) < ADD_DAYS(to_date(a."time"),-30)
		AND m.COUNTRY_BUSINESS IN ('de','at','ch')
	WHERE a.PROFILE_VISIT_REASON_ID = 100126 -- see: DIMENSIONS.DIM_PROFILE_VISIT_REASON / DIMENSIONS.DIM_PROFILE_VISITS
	AND to_date(a."time") BETWEEN '2019-01-01' AND '2020-07-31'
	GROUP BY 1,2
	) a
	ON d.DAY_DESC = a.VISIT_DATE
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;



----------------------------------------------------
-- New job

-- Alle X Sekunden findet ein XING user einen neuen Job
SELECT 
	d.MONTH_ID,
	min(to_date(d.DAY_DESC)) as PERIOD_START, 
	max(to_date(d.DAY_DESC)) as PERIOD_END,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) as "SECONDS_BETWEEN", 
	count(DISTINCT PROFILE_ID) as JOBS_CHANGER,
	seconds_between(add_days(max(to_date(d.DAY_DESC)),1), min(to_date(d.DAY_DESC))) / count(DISTINCT PROFILE_ID) AS "x"
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT 
		PROFILE_ID, 
		CASE WHEN m.COUNTRY_BUSINESS IN ('de','at','ch') THEN 'DACH' ELSE NULL END AS COUNTRY_BEGIN_DATE,
		BEGIN_DATE,
		JOB_TITLE,
		COMPANY_NAME,
		LAG(JOB_TITLE,1) OVER (PARTITION BY PROFILE_ID ORDER BY BEGIN_DATE ASC, END_DATE ASC) AS LAG_JOB_TITLE,
		LAG(COMPANY_NAME,1) OVER (PARTITION BY PROFILE_ID ORDER BY BEGIN_DATE ASC, END_DATE ASC) AS LAG_COMPANY_NAME
	 FROM IL_OPENBI.WORK_EXPERIENCES we
	 --/*
	 INNER JOIN IL_OPENBI.DIM_MEMBERS_T m
		ON we.PROFILE_ID = m.USER_ID
		AND we.BEGIN_DATE >= ADD_DAYS(m.DG_START_DATE,-1)
		AND we.BEGIN_DATE < ADD_DAYS(m.DG_END_DATE,-1)
		AND m.COUNTRY_BUSINESS IN ('de','at','ch')
	 --*/	
	 ) a
	ON d.DAY_DESC = a.BEGIN_DATE
	AND (  (COMPANY_NAME IS NOT NULL AND LAG_COMPANY_NAME IS NULL AND JOB_TITLE IS NOT NULL AND LAG_JOB_TITLE IS NULL)
		OR (COMPANY_NAME <> LAG_COMPANY_NAME AND JOB_TITLE <> LAG_JOB_TITLE)
		)
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
GROUP BY 1 ORDER BY 1 ASC
;




----------------------------------------------------
-- New job: Add-on

-- Alle X Sekunden findet ein XING user einen neuen Job
CREATE OR REPLACE TABLE USER_HANNAH_MUENCH.USER_WITH_NEW_JOB AS
SELECT 
	d.MONTH_ID,
	a.*
FROM DIMENSIONS.DIM_DAY d
LEFT JOIN 
	(SELECT 
		PROFILE_ID, 
		BEGIN_DATE,
		JOB_TITLE,
		COMPANY_NAME,
		LAG(JOB_TITLE,1) OVER (PARTITION BY PROFILE_ID ORDER BY BEGIN_DATE ASC, END_DATE ASC) AS LAG_JOB_TITLE,
		LAG(COMPANY_NAME,1) OVER (PARTITION BY PROFILE_ID ORDER BY BEGIN_DATE ASC, END_DATE ASC) AS LAG_COMPANY_NAME
	 FROM IL_OPENBI.WORK_EXPERIENCES we
	 --/*
	 INNER JOIN IL_OPENBI.DIM_MEMBERS_T m
		ON we.PROFILE_ID = m.USER_ID
		AND we.BEGIN_DATE >= ADD_DAYS(m.DG_START_DATE,-1)
		AND we.BEGIN_DATE < ADD_DAYS(m.DG_END_DATE,-1)
		AND m.COUNTRY_BUSINESS IN ('de','at','ch')
	 --*/
	 ) a
	ON d.DAY_DESC = a.BEGIN_DATE
	AND (  (COMPANY_NAME IS NOT NULL AND LAG_COMPANY_NAME IS NULL AND JOB_TITLE IS NOT NULL AND LAG_JOB_TITLE IS NULL)
		OR (COMPANY_NAME <> LAG_COMPANY_NAME AND JOB_TITLE <> LAG_JOB_TITLE)
		)
WHERE d.MONTH_ID BETWEEN 201901 AND 202007
AND a.PROFILE_ID IS NOT NULL
;
CREATE OR REPLACE TABLE USER_HANNAH_MUENCH.JOB_CHANGER_PRE AS
SELECT 
	DISTINCT s2.USER_ID
FROM USER_HANNAH_MUENCH.USER_WITH_NEW_JOB j
INNER JOIN DL_PROFILE.JOB_SEEKERS_T s
 	ON j.PROFILE_ID = s.USER_ID
	AND s.SEEKING_STATUS = 'seeking' 
	AND to_date(s.UPDATED_AT) >= ADD_MONTHS(j.BEGIN_DATE,-12)
	AND to_date(s.UPDATED_AT) < j.BEGIN_DATE
INNER JOIN DL_PROFILE.JOB_SEEKERS_T s2
 	ON s.USER_ID = s2.USER_ID
	AND s2.SEEKING_STATUS = 'not_seeking' 
	AND to_date(s.UPDATED_AT) BETWEEN ADD_MONTHS(j.BEGIN_DATE,-3) AND ADD_MONTHS(j.BEGIN_DATE,3)
;

SELECT
	j.MONTH_ID,
	count(DISTINCT j.PROFILE_ID) as JOBS_CHANGER,
	count(DISTINCT c.USER_ID) AS XING_JOB_AD_CLICKER,
	count(DISTINCT IFNULL(c.USER_ID,
								  CASE WHEN m.JOB_TITLE_CONTACT IS NOT NULL
										AND (  m.JOB_TITLE_CONTACT LIKE ('%HR%')
											OR lower(m.JOB_TITLE_CONTACT) LIKE ('%recruit%')
											OR lower(m.JOB_TITLE_CONTACT) LIKE ('%personal%')
											) THEN m.USER_ID_SENDER END)
											) AS XING_RECRUITER_CONTACTOR,
	count(DISTINCT IFNULL(c.USER_ID,m.USER_ID_SENDER)) AS XING_USER_CONTACTOR,
	count(DISTINCT IFNULL(IFNULL(c.USER_ID,m.USER_ID_SENDER),co.USER_ID)) AS COMPANY_PAGE_VISITOR,
	count(DISTINCT IFNULL(IFNULL(IFNULL(c.USER_ID,m.USER_ID_SENDER),co.USER_ID),se.USER_ID)) AS SEEKING_USER,
	count(DISTINCT IFNULL(IFNULL(IFNULL(IFNULL(c.USER_ID,m.USER_ID_SENDER),co.USER_ID),se.USER_ID),cl.USER_ID)) AS USER_WITH_JOBCLICKS
FROM USER_HANNAH_MUENCH.USER_WITH_NEW_JOB j
-- Job ad click
LEFT JOIN 
	(SELECT 
		v.USER_ID,
		v.POSTING_ID,
		to_date(v.CREATED_AT) AS CLICK_DATE,
		p.COMPANY_NAME,
		p.TITLE
	 FROM IL_OPENBI.FCT_POSTING_VIEWS v
	 INNER JOIN IL_OPENBI.DIM_POSTINGS p
		ON v.POSTING_ID = p.POSTING_ID
	 WHERE to_date(v.CREATED_AT) >= '2018-01-01'
	) c
	ON j.PROFILE_ID = c.USER_ID
	AND (INSTR(LOWER(j.COMPANY_NAME),LOWER(c.COMPANY_NAME)) <> 0 
		OR INSTR(LOWER(c.COMPANY_NAME),LOWER(j.COMPANY_NAME)) <> 0 )
	AND c.CLICK_DATE BETWEEN ADD_MONTHS(j.BEGIN_DATE,-6) AND j.BEGIN_DATE
-- Company contact (Recruiter / Employees)
LEFT JOIN
	(SELECT
		m.MESSAGE_SEND_DATE,	
		m.USER_ID_SENDER,
		m.USER_ID_RECIPIENT,
		u.COMPANY_NAME AS COMPANY_NAME_CONTACT,
		u.JOB_TITLE AS JOB_TITLE_CONTACT
	 FROM IL_OPENBI.FCT_MESSAGES m
	 INNER JOIN IL_OPENBI.WORK_EXPERIENCES u
		ON m.USER_ID_RECIPIENT = u.PROFILE_ID
		AND m.MESSAGE_SEND_DATE >= u.BEGIN_DATE
		AND (m.MESSAGE_SEND_DATE <= u.END_DATE OR u.END_DATE IS NULL OR u."current" = 1)
	 WHERE to_date(m.MESSAGE_SEND_DATE) >= '2018-01-01'
	) m
	ON j.PROFILE_ID = m.USER_ID_SENDER
	AND (INSTR(LOWER(j.COMPANY_NAME),LOWER(m.COMPANY_NAME_CONTACT)) <> 0 
		OR INSTR(LOWER(m.COMPANY_NAME_CONTACT),LOWER(j.COMPANY_NAME)) <> 0 )
	AND m.MESSAGE_SEND_DATE BETWEEN ADD_MONTHS(j.BEGIN_DATE,-6) AND j.BEGIN_DATE
-- Company Profile visit
LEFT JOIN 
	(SELECT 
		c.USER_ID,
		c.COMPANY_ID,
		n.COMPANY_NAME,
		to_date(c.VISITED_AT) AS VISIT_DATE
	 FROM DL_COMPANIES.XING_CP_VISITORS_T c
	 INNER JOIN IL_OPENBI.DIM_COMPANIES n
		ON c.COMPANY_ID = n.COMPANY_ID
	 WHERE to_date(c.VISITED_AT) >= '2018-01-01'
	) co
	ON j.PROFILE_ID = co.USER_ID
	AND (INSTR(LOWER(j.COMPANY_NAME),LOWER(co.COMPANY_NAME)) <> 0 
		OR INSTR(LOWER(co.COMPANY_NAME),LOWER(j.COMPANY_NAME)) <> 0 )
	AND co.VISIT_DATE BETWEEN ADD_MONTHS(j.BEGIN_DATE,-6) AND j.BEGIN_DATE
-- Seeking Status
LEFT JOIN USER_HANNAH_MUENCH.JOB_CHANGER_PRE se
	ON j.PROFILE_ID = se.USER_ID
-- Jobclicks
LEFT JOIN 
	(SELECT 
		v.USER_ID,
		sum(CLICK) AS JOBCLICKS
	 FROM USER_HANNAH_MUENCH.USER_WITH_NEW_JOB j
	 INNER JOIN IL_OPENBI.FCT_POSTING_VIEWS v
	 	ON j.PROFILE_ID = v.USER_ID
		AND to_date(v.CREATED_AT) BETWEEN ADD_MONTHS(j.BEGIN_DATE,-6) AND j.BEGIN_DATE
	 WHERE to_date(v.CREATED_AT) >= '2018-01-01'
	 GROUP BY 1
	 HAVING sum(CLICK) >= 10
	 --HAVING sum(CLICK) >= 20
	) cl
	ON j.PROFILE_ID = cl.USER_ID
GROUP BY 1 ORDER BY 1 ASC
;

